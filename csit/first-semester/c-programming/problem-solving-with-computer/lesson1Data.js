const lesson1Data = {
    'problem-analysis': {
        title: 'Problem Analysis',
        content: `<h1>Problem Analysis</h1><p>Problem analysis is the process of understanding and defining the problem clearly before developing a solution. It involves identifying the inputs, outputs, processing steps, and constraints. A clear analysis helps in developing accurate and efficient solutions.</p>`
    },
    'algorithms-flowchart': {
        title: 'Algorithms and Flowchart',
        content: `<h1>Algorithms and Flowchart</h1><p>An algorithm is a step-by-step procedure to solve a problem. A flowchart is a graphical representation of the algorithm using symbols to show the sequence of steps. Both help in visualizing the logic of a program before coding.</p>`
    },
    'flowcharts': {
        title: 'Flowcharts',
        content: `<h1>Flowcharts</h1><p>Flowcharts use different symbols such as ovals (start/end), parallelograms (input/output), rectangles (process), and diamonds (decision) to represent the logic of a program. They make understanding and communicating the solution easier.</p>`
    },
    'coding': {
        title: 'Coding',
        content: `<h1>Coding</h1><p>Coding is the process of converting the algorithm or flowchart into a programming language. It involves writing syntax-specific instructions that the computer can execute to perform tasks defined during problem analysis.</p>`
    },
    'compilation-execution': {
        title: 'Compilation and Execution',
        content: `<h1>Compilation and Execution</h1><p>Compilation is the process of converting source code into machine code by a compiler. Execution refers to running the compiled program. Errors during compilation are called compile-time errors, while those during execution are run-time errors.</p>`
    },
    'history-of-c': {
        title: 'History of C',
        content: `<h1>History of C</h1><p>The C programming language was developed by Dennis Ritchie in 1972 at Bell Labs. It evolved from earlier languages like B and BCPL and became popular for system programming, especially in implementing operating systems like UNIX.</p>`
    },
    'structure-of-c-program': {
        title: 'Structure of C Program',
        content: `<h1>Structure of C Program</h1><p>A C program typically consists of preprocessor directives, functions, declarations, statements, and comments. The main() function is the entry point. The general structure helps in organizing code for readability and maintenance.</p>`
    },
    'debugging': {
        title: 'Debugging',
        content: `<h1>Debugging</h1><p>Debugging is the process of finding and fixing errors in a program. It involves using tools or manual checks to trace bugs. Common techniques include print statements, breakpoints, and using debugging software or IDE features.</p>`
    },
    'testing-documentation': {
        title: 'Testing and Documentation',
        content: `<h1>Testing and Documentation</h1><p>Testing ensures that a program works as expected. It includes unit testing, integration testing, and system testing. Documentation involves writing explanatory notes and manuals to help users and developers understand the programâ€™s functionality and usage.</p>`
    }
};
